// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl", "debian-openssl-3.0.x"]
}

generator zod {
  provider       = "zod-prisma-types"
  output         = "../src/lib/zod"
  // createRelationValuesTypes = true
  addIncludeType = true
  addSelectType  = true
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

//--------------------------------
enum Platform {
  GITHUB
  GITLAB
  X
}

model UserPlatform {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  platform       Platform @default(GITHUB) @map("platform")
  platformId     String   @map("platform_id") @db.VarChar(255)
  platformName   String   @map("platform_name") @db.VarChar(255)
  platformAvatar String   @map("platform_avatar") @db.VarChar(255)
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @map("user_address") @db.VarChar(255)

  @@unique([userId, platform])
  @@index([platform, platformId])
  @@map("t_user_platform")
}

model ApiKey {
  key       String    @id @unique @db.VarChar(255)
  name      String    @db.VarChar(255)
  userId    String?   @map("user_address") @db.VarChar(255)
  createdAt DateTime  @default(now()) @map("created_at")
  expiredAt DateTime? @map("expired_at")

  @@unique([name, userId])
  @@map("t_api_key")
}

model User {
  id               String            @id @map("id") @db.VarChar(255)
  referralCode     String            @unique @map("referral_code")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at")
  invitedBy        String[]          @default([]) @map("invited_by")
  ranks            Rank[]
  platforms        UserPlatform[]
  articles         Article[]
  rankLikes        RankLike[]
  rankStars        RankStar[]
  softwareLikes    SoftwareLike[]
  softwareStars    SoftwareStar[]
  rankComments     RankComment[]
  softwareComments SoftwareComment[]

  @@map("t_user")
}

model Tag {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  name      String        @map("name") @db.VarChar(255)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")
  ranks     RankTag[]
  softwares SoftwareTag[]

  @@map("t_tag")
}

model Rank {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  userId      String           @map("user_id") @db.VarChar(255)
  name        String           @map("name") @db.VarChar(255)
  description String?          @map("description") @db.VarChar(255)
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @default(now()) @updatedAt @map("updated_at")
  user        User             @relation(fields: [userId], references: [id])
  tags        RankTag[]
  softwares   SoftwareOnRank[]
  articles    Article[]
  likes       RankLike[]
  stars       RankStar[]
  comments    RankComment[]
  metadata    RankMetadata?

  @@map("t_rank")
}

model RankMetadata {
  id        String   @id @map("id") @db.VarChar(78)
  rankId    String   @unique @map("rank_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  rank      Rank     @relation(fields: [rankId], references: [id], onDelete: Cascade)

  @@map("t_rank_metadata")
}

model RankTag {
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String   @map("tag_id")
  rank      Rank     @relation(fields: [rankId], references: [id])
  rankId    String   @map("rank_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@id([tagId, rankId])
  @@map("t_rank_tag")
}

model SoftwareCategory {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  name      String     @map("name") @db.VarChar(255)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  softwares Software[]

  @@map("t_software_category")
}

model Software {
  id          String              @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  image       String              @map("image") @db.VarChar(255)
  name        String              @map("name") @db.VarChar(255)
  description String?             @map("description") @db.Text
  categoryId  String              @map("category_id")
  url         String              @map("url") @db.VarChar(255)
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @updatedAt @map("updated_at")
  tags        SoftwareTag[]
  ranks       SoftwareOnRank[]
  likes       SoftwareLike[]
  stars       SoftwareStar[]
  articles    SoftwareOnArticle[]
  comments    SoftwareComment[]
  category    SoftwareCategory    @relation(fields: [categoryId], references: [id])

  @@map("t_software")
}

model SoftwareTag {
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String   @map("tag_id")
  software   Software @relation(fields: [softwareId], references: [id])
  softwareId String   @map("software_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@id([tagId, softwareId])
  @@map("t_software_tag")
}

model SoftwareOnRank {
  software    Software @relation(fields: [softwareId], references: [id])
  softwareId  String   @map("software_id")
  description String   @map("description") @db.Text
  rank        Rank     @relation(fields: [rankId], references: [id])
  rankId      String   @map("rank_id")
  rankIndex   Int      @map("rank_index")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  @@id([softwareId, rankId])
  @@map("t_softwares_on_rank")
}

model SoftwareOnArticle {
  software   Software @relation(fields: [softwareId], references: [id])
  softwareId String   @map("software_id")
  article    Article  @relation(fields: [articleId], references: [id])
  articleId  String   @map("article_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@id([softwareId, articleId])
  @@map("t_software_on_article")
}

model Article {
  id          String              @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  title       String              @db.VarChar(255)
  description String              @db.Text
  image       String              @db.VarChar(255)
  content     String              @db.Text
  rank        Rank                @relation(fields: [rankId], references: [id])
  rankId      String              @map("rank_id")
  author      User                @relation(fields: [userId], references: [id])
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @updatedAt @map("updated_at")
  userId      String              @map("user_id") @db.VarChar(255)
  softwares   SoftwareOnArticle[]

  @@map("t_rank_article")
}

model RankLike {
  rank      Rank     @relation(fields: [rankId], references: [id])
  rankId    String   @map("rank_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")

  @@id([rankId, userId])
  @@map("t_rank_like")
}

model RankStar {
  rank      Rank     @relation(fields: [rankId], references: [id])
  rankId    String   @map("rank_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")

  @@id([rankId, userId])
  @@map("t_rank_star")
}

model SoftwareLike {
  software   Software @relation(fields: [softwareId], references: [id])
  softwareId String   @map("software_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id") @db.VarChar(255)
  createdAt  DateTime @default(now()) @map("created_at")

  @@id([softwareId, userId])
  @@map("t_software_like")
}

model SoftwareStar {
  software   Software @relation(fields: [softwareId], references: [id])
  softwareId String   @map("software_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id") @db.VarChar(255)
  createdAt  DateTime @default(now()) @map("created_at")

  @@id([softwareId, userId])
  @@map("t_software_star")
}

model RankComment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  rankId    String   @map("rank_id")
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  userId    String    @map("user_id") @db.VarChar(255)
  deletedAt DateTime? @map("deleted_at")

  replyToComment String? @map("reply_to_comment") @db.VarChar(255)
  replyToUser    String? @map("reply_to_user") @db.VarChar(255)
  rootCommentId  String? @map("root_comment_id") @db.VarChar(255)

  rank Rank @relation(fields: [rankId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@index([rootCommentId])
  @@index([createdAt])
  @@map("t_rank_comment")
}

model SoftwareComment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  softwareId String   @map("software_id")
  content    String   @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  userId    String    @map("user_id") @db.VarChar(255)
  deletedAt DateTime? @map("deleted_at")

  replyToComment String? @map("reply_to_comment") @db.VarChar(255)
  replyToUser    String? @map("reply_to_user") @db.VarChar(255)
  rootCommentId  String? @map("root_comment_id") @db.VarChar(255)

  software Software @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  @@index([rootCommentId])
  @@index([createdAt])
  @@map("t_software_comment")
}
